datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Using Postgres
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  role          String?   @default("Collaborator")
  accounts      Account[]
  sessions      Session[]

  // m-n -> User can belong to many teams
  teams Team[]

  // 1-n User can create many teams
  createdTeams Team[] @relation("CreatedTeam")

  // 1-n -> User can create many invitations
  invitationsSent     Invitation[] @relation("InvitationsSent")
  invitationsRecieved Invitation[] @relation("InvitationsReceived")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // m-n -> Team can have many users
  users User[]

  // 1-n -> Team can have many projects
  projects Project[]

  // 1-n -> Team can be created by 1 user
  createdBy       User         @relation("CreatedTeam", fields: [createdByUserId], references: [id])
  createdByUserId String
  Invitation      Invitation[]
}

// Files belong to projects. A user can belong in a team that has many projects. A project can have many files.
model Project {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // 1-n -> Project can belong to 1 team
  Team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  // 1-n -> Project can have many videos
  files File[]
}

model File {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String // eg "John Doe's Interview 06/01/2021"
  uri         String // eg "https://s3.amazonaws.com/{bucket-name}/teams/{team-id}/projects/{project-id}/files/interview.mp4"
  type        FileType
  description String?
  transcript  Json?

  // 1-n -> Video can belong to 1 project
  Project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Invitation {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  invitedEmail String           @db.VarChar(320)
  status       InvitationStatus @default(PENDING)
  teamId       String
  team         Team             @relation(fields: [teamId], references: [id])

  // 1-n -> Invitation can be created by 1 user
  invitedByUserId String?
  invitedByUser   User?   @relation("InvitationsSent", fields: [invitedByUserId], references: [id])

  // 1-n -> Invitation can be accepted by 1 user
  invitedUser   User?   @relation("InvitationsReceived", fields: [invitedUserId], references: [id])
  invitedUserId String?

  @@unique([invitedEmail, teamId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum FileType {
  VIDEO
  AUDIO
  POWERPOINT
  PDF
  WORD
  EXCEL
  IMAGE
  OTHER
}
