datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  role          String?   @default("Collaborator")
  accounts      Account[]
  sessions      Session[]

  // m-n -> User can belong to many teams
  teams Team[]

  // 1-n User can create many teams
  createdTeams Team[] @relation("CreatedTeam")

  // 1-n -> User can create many invitations
  invitationsSent     Invitation[] @relation("InvitationsSent")
  invitationsRecieved Invitation[] @relation("InvitationsReceived")
  Speaker             Speaker[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // m-n -> Team can have many users
  users User[]

  // 1-n -> Team can have many projects
  projects Project[]

  // 1-n -> Team can have many files
  files File[]

  // 1-n -> Team can be created by 1 user
  createdBy       User         @relation("CreatedTeam", fields: [createdByUserId], references: [id])
  createdByUserId String
  Invitation      Invitation[]

  // Frequently fetching teams based on id
  @@index([id])
}

model Invitation {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  invitedEmail String           @db.VarChar(320)
  status       InvitationStatus @default(PENDING)
  teamId       String
  team         Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // 1-n -> Invitation can be created by 1 user
  invitedByUserId String?
  invitedByUser   User?   @relation("InvitationsSent", fields: [invitedByUserId], references: [id], onDelete: Cascade)

  // 1-n -> Invitation can be accepted by 1 user
  invitedUser   User?   @relation("InvitationsReceived", fields: [invitedUserId], references: [id], onDelete: Cascade)
  invitedUserId String?

  @@unique([invitedEmail, teamId])
  @@index([status])
}

// Files belong to projects. A user can belong in a team that has many projects. A project can have many files.
model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // 1-n -> Project can belong to 1 team
  Team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  // 1-n -> Project can have many videos
  files File[]

  Clip Clip[]
  Note Note[]
  Tag  Tag[]

  status ProjectStatus @default(ACTIVE)

  // Frequently fetching projects based on team id
  @@index([teamId])
}

model File {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String?
  uri         String
  type        FileType
  status      FileStatus @default(PROCESSING)

  // 1-n: Video can belong to 1 project
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  // 1-n: files belong to a team. A team can have many files.
  Team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  // 1-1: a file can have one transcript
  transcript Transcript?

  // 1-1: a File can have one Deepgram transcript request ID
  transcriptRequestId DeepgramTranscriptRequest?

  Speaker Speaker[]
  Clip    Clip[]
  Note    Note[]
  Tag     Tag[]

  // Frequently fetching files based on project id
  @@index([projectId])
}

model DeepgramTranscriptRequest {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  request_id String   @unique

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String @unique
}

model Transcript {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  confidence       Float
  words            Json
  topics           Json
  entities         Json
  summaries        Json
  paragraphs       Json
  transcriptString String

  // 1-1: a Transcript can have one TranscriptMetadata.
  metadata TranscriptMetadata?

  // 1-1: a Transcript belongs to one File. A File can have one Transcript.
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String @unique
}

model TranscriptMetadata {
  id         String   @id @default(cuid())
  created    String
  tags       String[]
  models     String[]
  sha256     String
  channels   Int
  duration   Float
  model_info Json
  request_id String

  // 1-1: a Transcript can have one TranscriptMetadata
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  transcriptId String     @unique
}

// A file may have speakers. A speaker belongs to one file.
model Speaker {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String?

  // A speaker can also be a user in the team
  teamMemberId String?
  user         User?   @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  // 1-n -> Speaker can belong to 1 file
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String
}

model Clip {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String
  description String?
  start       Float
  end         Float
  uri         String
  type        FileType
  transcript  Json?

  // 1-n -> Clip can belong to 1 file
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String

  // 1-n -> Clip can belong to 1 project
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  start     Float
  end       Float

  // 1-n -> Note can belong to 1 file
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String

  // 1-n -> Note can belong to 1 project
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  // 1-n -> A note can have many tags
  tags Tag[]

  // A note must be created by a user
  createdByUserId String?
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  start     Float
  end       Float

  // 1-n -> Tag can belong to 1 file
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String

  // 1-n -> Tag can belong to 1 project
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  // 1-n -> A tag can belong to many notes
  notes Note[]

  // A tag must be created by a user
  createdByUserId String?
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

enum FileType {
  VIDEO
  AUDIO
  POWERPOINT
  PDF
  WORD
  EXCEL
  IMAGE
  OTHER
}

enum FileStatus {
  PROCESSING
  ERROR
  COMPLETED
}
